import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.time.LocalDateTime;

public class Admin extends User {
    private String adminId;
    private AdminRole role;
    private List<Notification> notifications;

    public Admin(int userId, String name, String email, char[] password, String phone,
                 String preferredLanguage, Gender gender, String adminId, AdminRole role) {
        super(userId, name, email, password, phone, preferredLanguage, gender);
        this.adminId = adminId;
        this.role = role;
        this.notifications = new ArrayList<>();
    }

    // Polymorphism methods for OOP demonstration
    @Override
    public String displayInfo() {
        return "Admin: " + name + " (" + gender + "), Role: " + role +
                ", Email: " + email + ", ID: " + adminId;
    }

    @Override
    public String getUserType() {
        return "Administrator (" + role + ")";
    }

    public void generatePassengerStatsReport(List<Passenger> passengers, AdminRole adminRole) {
        if (!ReportType.PASSENGER_STATS.isAvailableTo(adminRole)) {
            createNotification("Access denied for passenger statistics report", "ERROR");
            System.out.println("Access denied for passenger statistics report");
            return;
        }

        if (passengers == null || passengers.isEmpty()) {
            createNotification("No passenger data available for report", "WARNING");
            System.out.println("No passenger data available for report generation");
            return;
        }

        List<String> columns = ReportType.PASSENGER_STATS.getDefaultColumns();
        System.out.println("=== PASSENGER STATISTICS REPORT ===");
        System.out.println("Generated by: " + getName() + " (" + adminRole.getDisplayName() + ")");
        System.out.println("Generated at: " + LocalDateTime.now());
        System.out.println("Total Passengers: " + passengers.size());
        System.out.println();

        System.out.println(String.join(" | ", columns));
        System.out.println("=".repeat(80));

        double totalRevenue = 0.0;
        for (Passenger passenger : passengers) {
            List<Ticket> passengerTickets = Ticket.getBookings(passenger.getPassengerId());
            String routeData = passengerTickets.isEmpty() ? "No Routes" :
                    passengerTickets.get(0).getRoute();
            double passengerFare = passengerTickets.stream()
                    .mapToDouble(Ticket::getPrice)
                    .sum();
            totalRevenue += passengerFare;

            System.out.println(passenger.getPassengerId() + " | " +
                    passenger.getName() + " | " +
                    routeData + " | " +
                    LocalDateTime.now().toLocalDate() + " | " +
                    "৳" + String.format("%.2f", passengerFare));
        }

        System.out.println("=".repeat(80));
        System.out.println("Total Revenue: ৳" + String.format("%.2f", totalRevenue));
        System.out.println("Average Fare per Passenger: ৳" + String.format("%.2f", totalRevenue / passengers.size()));
        System.out.println("=====================================");
        createNotification("Passenger statistics report generated successfully", "SUCCESS");
    }

    public boolean manageSchedule(String schedule) {
        if (!role.hasScheduleAccess()) {
            createNotification("Schedule access denied for role: " + role.getDisplayName(), "ERROR");
            return false;
        }

        if (schedule == null || schedule.trim().isEmpty()) {
            System.out.println("Schedule information is required");
            return false;
        }

        System.out.println("Schedule managed: " + schedule);
        createNotification("Schedule successfully updated: " + schedule, "INFO");
        return true;
    }

    public String generateReport(ReportType reportType) {
        if (!reportType.isAvailableTo(this.getRole())) {
            createNotification("Report generation failed: Insufficient permissions for " + reportType.name(), "ERROR");
            return "Error: Insufficient permissions for " + reportType.name() + " report";
        }

        if (reportType.requiresSensitiveData()) {
            if (!validateSecurityClearance()) {
                createNotification("Report generation failed: Security clearance required", "WARNING");
                return "Error: Security clearance required for sensitive reports";
            }
        }

        String reportContent = generateReportFromTemplate(reportType.getTemplatePath(), reportType.getDefaultColumns());
        createNotification("Report generated successfully: " + reportType.name(), "SUCCESS");
        return reportContent;
    }

    public String generateReport(String reportType) {
        if (reportType == null || reportType.trim().isEmpty()) {
            createNotification("Report generation failed: Report type is required", "ERROR");
            return "Error: Report type is required";
        }

        try {
            ReportType enumType = ReportType.valueOf(reportType.toUpperCase());
            return generateReport(enumType);
        } catch (IllegalArgumentException e) {
            createNotification("Report generation failed: Invalid report type " + reportType, "ERROR");
            return "Error: Invalid report type " + reportType;
        }
    }

    private boolean validateSecurityClearance() {
        return role.getAccessLevel() >= 4;
    }

    private String generateReportFromTemplate(String templatePath, List<String> columns) {
        StringBuilder report = new StringBuilder();
        report.append("=== TRANSPORT SYSTEM REPORT ===\n");
        report.append("Generated by: ").append(getName()).append(" (").append(role.getDisplayName()).append(")\n");
        report.append("Generated at: ").append(LocalDateTime.now()).append("\n");
        report.append("Template: ").append(templatePath).append("\n\n");

        report.append("Columns: ");
        for (String column : columns) {
            report.append(column).append(" | ");
        }

        report.append("\n");
        report.append("--- Report Data Would Appear Here ---\n");
        report.append("Note: This is a template-generated report.\n");
        return report.toString();
    }

    public boolean approveRefund(double amount) {
        if (!role.canApproveRefunds()) {
            createNotification("Refund approval denied. Insufficient privileges for role: " + role.getDisplayName(), "WARNING");
            return false;
        }

        createNotification("Refund of ৳" + String.format("%.2f", amount) + " approved by " + getName(), "SUCCESS");
        return true;
    }

    private void createNotification(String message, String type) {
        int notificationId = notifications.size() + 1;
        Notification notification = new Notification(notificationId, message, type, LocalDateTime.now());
        notifications.add(notification);
        notification.sendNotification();
    }

    public void sendCustomNotification(String message, String type, LocalDateTime scheduledTime) {
        int notificationId = notifications.size() + 1;
        Notification notification = new Notification(notificationId, message, type, scheduledTime);
        notifications.add(notification);
        if (scheduledTime.isAfter(LocalDateTime.now())) {
            notification.scheduleNotification();
        } else {
            notification.sendNotification();
        }
    }

    public List<Notification> getUnreadNotifications() {
        List<Notification> unread = new ArrayList<>();
        for (Notification notification : notifications) {
            if (!notification.isRead()) {
                unread.add(notification);
            }
        }
        return unread;
    }

    public List<Notification> getPendingNotifications() {
        List<Notification> pending = new ArrayList<>();
        for (Notification notification : notifications) {
            if (notification.isPending()) {
                pending.add(notification);
            }
        }
        return pending;
    }

    public void markNotificationAsRead(int notificationId) {
        for (Notification notification : notifications) {
            if (notification.getNotificationId() == notificationId) {
                notification.markAsRead();
                break;
            }
        }
    }

    public void displayAllNotifications() {
        System.out.println("=== Notifications for Admin: " + getName() + " ===");
        if (notifications.isEmpty()) {
            System.out.println("No notifications found.");
            return;
        }

        for (Notification notification : notifications) {
            notification.displayNotification();
            System.out.println("---");
        }
    }

    public void displayAdminDashboard() {
        System.out.println("=== Admin Dashboard ===");
        System.out.println("Admin ID: " + adminId);
        System.out.println("Name: " + getName());
        System.out.println("Role: " + role.getDisplayName());
        System.out.println("Access Level: " + role.getAccessLevel());
        System.out.println("Schedule Access: " + (role.hasScheduleAccess() ? "Yes" : "No"));
        System.out.println("Refund Approval: " + (role.canApproveRefunds() ? "Yes" : "No"));
        System.out.println("Unread Notifications: " + getUnreadNotifications().size());
        System.out.println("Pending Notifications: " + getPendingNotifications().size());
        System.out.println("Available Reports: " + getAvailableReports().size());
        System.out.println("========================");
    }

    public List<ReportType> getAvailableReports() {
        List<ReportType> availableReports = new ArrayList<>();
        for (ReportType reportType : ReportType.values()) {
            if (reportType.isAvailableTo(this.role)) {
                availableReports.add(reportType);
            }
        }
        return availableReports;
    }

    public String getAdminId() {
        return adminId;
    }

    public AdminRole getRole() {
        return role;
    }

    public List<Notification> getNotifications() {
        return notifications;
    }

    @Override
    public String toString() {
        return "Admin{" +
                "adminId='" + adminId + '\'' +
                ", role=" + role +
                ", userId=" + getUserId() +
                ", name='" + getName() + '\'' +
                ", email='" + getEmail() + '\'' +
                ", notifications=" + notifications.size() +
                '}';
    }
}
